
#+Title: Iz's StumpWM Config
#+DESCRIPTION: Mainly for personal backups, but if you want 'em, use 'em.
#+KEYWORDS: org-mode, stumpwm, readme, lisp, izder
#+PROPERTY: header-args: :tangle ~/.stumpwm.d :mkdirp t

+ Mainly for personal backups, but if you want 'em, use 'em!

+ /I won't provide support for any issues on your machine, as this is a pet project./

-----

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[./LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- /Use with *caution*/

-----

* Table of Contents :TOC_4:
- [[#disclaimer][DISCLAIMER]]
- [[#binds][Binds]]
  - [[#apps][Apps]]
  - [[#window-management][Window Management]]
  - [[#misc][Misc]]
  - [[#search--termjumps][Search & Termjumps]]
    - [[#note][/Note/]]
- [[#code-structure][Code Structure]]
  - [[#initlisp][init.lisp]]
    - [[#wm-boilerplate][WM Boilerplate]]
    - [[#colors][Colors]]
    - [[#styling][Styling]]
    - [[#environment-variables][Environment Variables]]
    - [[#modules][Modules]]
    - [[#load-in-bindsjumps][Load in binds/jumps]]
    - [[#window-groups][Window Groups]]
    - [[#modeline-formatting][Modeline Formatting]]
    - [[#cleanup-and-autostarts][Cleanup and Autostarts]]
  - [[#bindlisp][bind.lisp]]
    - [[#set-key-prefix][Set Key Prefix]]
    - [[#remove-default-binds][Remove default binds]]
    - [[#define-new-interactive-keymaps][Define New Interactive Keymaps]]
    - [[#define-key-macros][Define Key Macros]]
    - [[#define-toggle-float-command][Define toggle-float command]]
    - [[#define-bind-keylists][Define Bind Keylists]]
    - [[#loop-bind-keylists][Loop Bind Keylists]]
    - [[#define-new-keymaps][Define New Keymaps]]
  - [[#jumpslisp][jumps.lisp]]
    - [[#define-jump-macros][Define Jump Macros]]
    - [[#define-browser-jumps][Define Browser Jumps]]
    - [[#set-jump-aliases][Set Jump Aliases]]
    - [[#bind-jump-aliases][Bind Jump Aliases]]
  - [[#autostartlisp][autostart.lisp]]

* Binds

/Note/ this may become out of date, please refer to the code for the binds

** Apps

| Prefix       | Bind     | Function                         |
|--------------+----------+----------------------------------|
| =C-t= /OR/ =M-a=   | =c= /OR/ =C-c= | open suckless term               |
| =C-t= /OR/ =M-a=   | =f=        | open firefox                     |
| =C-t= /OR/ =M-a=   | =F=        | open pcmanfm                     |
| =C-t= /OR/ =M-a=   | =E=        | open claws-mail                  |
| =C-t= /OR/ =M-a=   | =e= /OR/ =C-e= | open emacs daemon /OR/ open client |
| =C-t= /OR/ =M-a=   | =s-e=      | force kill emacs daemon          |
| =C-t= /OR/ =M-a=   | =Space=    | rofi drun menu                   |
| =C-t= /OR/ =M-a=   | =Return=   | rofi window select menu          |
| =C-t= /OR/ =M-a=   | =M-b=      | shuffle background               |
| =C-t= /OR/ =M-a=   | =l=        | lock screen with slock           |

** Window Management

| Prefix | Bind                       | Function                                     |
|--------+----------------------------+----------------------------------------------|
| =C-t=    | =s=                          | vertical split                               |
| =C-t=    | =S=                          | horizontal split                             |
| =C-t=    | =Q=                          | maximize frame                               |
| =C-t=    | =<Direction-Key>= /OR/ =<Click>= | select frame to focus                        |
| =C-t=    | =C-<Direction-Key>=          | swap frame in direction                      |
| =C-t=    | =k=                          | kill active frame                            |
| =C-t=    | =m=                          | select frame for bulk move                   |
| =C-t=    | =M=                          | move bulk select to group                    |
| =C-t=    | =FnKey=                      | switch to group                              |
| =C-t=    | =n=                          | rotate frame                                 |
| =C-t=    | =R=                          | resize mode                                  |
| =C-t=    | =x=                          | open xkill (like force-quit on macOS X)      |
| =C-t=    | =p=                          | toggle push/pop frame to/from floating group |
| =C-t=    | =M-p=                        | "flatten" all floating windows to frame      |
| =C-t=    | =q=                          | Prompt to exit session                       |
| =C-t=    | =M-q=                        | Quick exit session                           |
| =NONE=   | =M-Escape=                   | Toggle Modeline                              |

** Misc

| Prefix | Bind          | Function                        |
|--------+---------------+---------------------------------|
| =NONE=   | =PrintScreen=   | screenshot full                 |
| =NONE=   | =M-PrintScreen= | screenshot interactive select   |
| =NONE=   | =s-PrintScreen= | screenshot active frame/window  |

** Search & Termjumps

| Prefix | Bind  | Function                         |
|--------+-------+----------------------------------|
| =M-s=    | =M-C-s= | Search Duckduckgo for selection  |
| =M-s=    | =M-s=   | Search Duckduckgo for prompt     |
| =M-s=    | =M-C-l= | Search LibreY for selection      |
| =M-s=    | =M-l=   | Search LibreY for prompt         |
| =M-s=    | =M-C-o= | Search Package Web for selection |
| =M-s=    | =M-o=   | Search Package Web for prompt    |
| =M-s=    | =M-m=   | Search Manpages                  |
| =M-s=    | =M-M=   | Open Manpage                     |
| =M-s=    | =M-p=   | Search Package Name              |
| =M-s=    | =M-P=   | Search Package File              |

*** /Note/

when a window is in floating mode,
+ the =Super= key is the prefix
+ left click (and drag) is move
+ right click (and drag) is resize
+ you can only mark (and move) frames, so flatten any floating windows before swapping groups

* Code Structure
** init.lisp

This is the first thing the WM Loads.

*** WM Boilerplate

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; StumpWM Boilerplate
;;;

;; Quicklisp Setup
(let ((quicklisp-init (merge-pathnames ".quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;; this automatically prefixes 'stumpwm:' to commands that need it
(in-package :stumpwm)
(setf *default-package* :stumpwm)

;; Set Modules
(set-module-dir "~/.stumpwm.d/modules")
#+END_SRC

*** Colors

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Colors
;;;

;; Colormap
(defvar iz-black "#282828")
(defvar iz-red "#CC241D")
(defvar iz-softred "#FB4934")
(defvar iz-green "#98971A")
(defvar iz-softgreen "#B8BB26")
(defvar iz-yellow "#D79921")
(defvar iz-softyellow "#FABD2F")
(defvar iz-blue "#458588")
(defvar iz-softblue "#83A598")
(defvar iz-purple "#B16286")
(defvar iz-softpurple "#D3869B")
(defvar iz-aqua "#689D6A")
(defvar iz-softaqua "#8EC07C")
(defvar iz-orange "#D65D0E")
(defvar iz-softorange "#FE8019")
(defvar iz-white "#EBDBB2")
(defvar iz-gray "#928374")

;; Color list for `^` formatting
(setf *colors* (list iz-black ;; ^0
                     iz-red ;; ^1
                     iz-green ;; ^2
                     iz-yellow ;; ^3
                     iz-blue ;; ^4
                     iz-purple ;; ^5
                     iz-aqua ;; ^6
                     iz-white ;; ^7
                     iz-orange ;; ^8
                     iz-gray ;; ^9
                     ))
;; Set those colors
(update-color-map (current-screen))
#+END_SRC

*** Styling

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Styling
;;;

;; Set font and colors for the message window
(set-fg-color iz-white)
(set-bg-color iz-black)
(set-border-color iz-white)
(set-msg-border-width 4)
(set-font "-*-spleen-*-*-*-*-12-*-*-*-*-*-*-*")

;; MouseKeys
(setf *mouse-focus-policy* :click
      ,*float-window-modifier* :SUPER)

;; Welcome
(setq *startup-message* (format nil "^B^8Welcome Izzy!")) ;; Orange

;; Set focus and unfocus colors
(set-focus-color iz-white)
(set-unfocus-color iz-gray)
(set-float-focus-color iz-aqua)
(set-float-unfocus-color iz-softaqua)
#+END_SRC

*** Environment Variables

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Env Vars
;;;

;; Set env vars
(setf (getenv "PATH") "/home/izder456/.npm-global/bin:/home/izder456/.cargo/bin:/home/izder456/.local/bin:/home/izder456/.emacs.d/bin:/home/izder456/.local/share/pkg/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:/usr/local/jdk-17/bin")
(setf (getenv "PAGER") "most")
#+END_SRC

*** Modules

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Modules & their config
;;;

;; Init modules
(init-load-path *module-dir*)
(add-to-load-path "~/.stumpwm.d/extras/scratchpad")

(defvar *modulenames*
	 (list "swm-gaps"
	       "swm-emacs"
	       "scratchpad"
	       "hostname"
	       "battery-portable"
	       "stumpwm-sndioctl"
	       "browse"
	       "searchengines"))

(dolist (modulename *modulenames*)
  (load-module modulename))

;;
; Module Settings
;;

;; swm-gapes
; Set Gaps
(setf swm-gaps:*inner-gaps-size* 8
      swm-gaps:*outer-gaps-size* 10)
; Turn em on
(swm-gaps:toggle-gaps-on)

;; scratchpad
; define default scratchpad term
(defcommand scratchpad-term () ()
  (scratchpad:toggle-floating-scratchpad "term" "st"
                                         :initial-gravity :center
                                         :initial-width 720
                                         :initial-height 480))
; Bind Scratchpad to Super+t
(define-key *top-map* (kbd "s-t") "scratchpad-term")
#+END_SRC

*** Load in binds/jumps

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Load in other files
;;;

;; binds
(load "~/.stumpwm.d/bind.lisp")

;; jumps
(load "~/.stumpwm.d/jumps.lisp")
#+END_SRC

*** Window Groups

#+BEGIN_SRC lisp :tangle init.lisp
;; Rename and create new groups
(when *initializing*
  (grename "Ness")
  (gnewbg "Paula")
  (gnewbg "Jeff")
  (gnewbg "Poo"))

;; Group format
(setf *group-format* "%n %t")

;; Window format
(setf *window-format* (format NIL "^(:fg \"~A\")<%25t>" iz-softgreen)
      ,*window-border-style* :tight
      ,*normal-border-width* 4)

;; Time format
(setf *time-modeline-string* "%a, %b %d @%I:%M%p")

;; Message window settings
(setf *message-window-padding* 12
      ,*message-window-y-padding* 10
      ,*message-window-gravity* :top)

;; Input window settings
(setf *input-window-gravity* :center)
#+END_SRC


*** Modeline Formatting

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Define Functions
;;;

;; Run a shell command and format the output
(defun run-shell-command-and-format (command)
  (substitute #\Space #\Newline (run-shell-command command t)))

;; Show the kernel version
(defun show-kernel ()
  (run-shell-command-and-format "uname -r"))

;; Show the temperature
(defun show-temp ()
  (run-shell-command-and-format "sysctl -n hw.sensors.cpu0.temp0"))

;; Show the window title
(defun show-window-title ()
  (substitute #\Space #\Newline (window-title (current-window))))

;;;
;; Formatting
;;;

;; Break out modeline formatting
; Constants
(defvar pipe "|")

; Format Lists
(defvar group-fmt (list
                   "^n%g" ;; Default
                   ))
(defvar win-fmt (list
                 "^n%v ^>^7" ;; Default -> Right Allign
                 ))
(defvar status-fmt (list
                    "^n" pipe ;; Default
                    " %h " pipe ;; Hostname
                    " %B " pipe ;; Battery
                    " " '(:eval (show-temp)) pipe;; Cpu Temp
                    " %d " pipe ;; Date
                    ))

; Screen mode line format
(setf *screen-mode-line-format*
      (list "^b(" ;; Yellow
            group-fmt
            "^1 [ " ;; Red
            win-fmt
            "^1] " ;; Red
            "^5[" ;; Magenta
            status-fmt
            "^5]" ;; Magenta
            "^3^b)" ;; Yellow
            ))

; Format Modeline
(setf *mode-line-background-color* iz-black
      ,*mode-line-foreground-color* iz-softyellow
      ,*mode-line-border-color* iz-white
      ,*mode-line-border-width* 4
      ,*mode-line-pad-x* 12
      ,*mode-line-pad-y* 10
      ,*mode-line-timeout* 5)

;; Toggle mode line display
(toggle-mode-line (current-screen) (current-head))
#+END_SRC

*** Cleanup and Autostarts

#+BEGIN_SRC lisp :tangle init.lisp
;; cleanup/autostart
(load "~/.stumpwm.d/autostart.lisp")
#+END_SRC

** bind.lisp

Handling bindings

*** Set Key Prefix

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Bindings
;;;

;; Set prefix key
(set-prefix-key (kbd "C-t"))
#+END_SRC

*** Remove default binds

#+BEGIN_SRC lisp :tangle bind.lisp
(define-key *root-map* (kbd "c") NIL)
(define-key *root-map* (kbd "C-c") NIL)
(define-key *root-map* (kbd "e") NIL)
#+END_SRC

*** Define New Interactive Keymaps

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Make New Keymaps
;;;
(defvar *search-map*
  (let ((map (make-sparse-keymap)))
    map))
(defvar *app-map*
  (let ((map (make-sparse-keymap)))
    map))

(define-key *root-map* (kbd "M-s") *search-map*)
(define-key *top-map* (kbd "M-s") *search-map*)

(define-key *root-map* (kbd "M-a") *app-map*)
(define-key *top-map* (kbd "M-a") *app-map*)
#+END_SRC
*** Define Key Macros

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Bind Macro
;;;

;; Bind shell command to a specified map (default is *root-map*)
(defmacro bind-shell-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string "run-shell-command " ,command)))

;; Bind stumpwm command to a specified map (default is *root-map*)
(defmacro bind-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) ,command))

;;;
;; Loop & Bind Macro
;;;

;; Loop through keybind lists and bind them
(defmacro loop-and-bind (key-cmd-list bind-macro &optional (map *root-map*))
  `(sb-thread:make-thread
    (lambda ()
      (dolist (key-cmd ,key-cmd-list) (,bind-macro (first key-cmd) (second key-cmd) ,map)))))
#+END_SRC

*** Define toggle-float command

#+BEGIN_SRC lisp :tangle bind.lisp
;; Push/Pop Current Window Into a Floating group
(defcommand toggle-float () ()
  (sb-thread:make-thread
   (lambda ()
     (if (float-window-p (current-window))
         (unfloat-this)
         (float-this)))))
#+END_SRC

*** Define Bind Keylists

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Bind Key Lists
;;;

;; Set Special keys
(defvar *my-special-key-commands*
  '(("Print" "scrot -F ~/Pictures/screenshot-`date +%F`.png")
    ("M-Print" "scrot -s -F ~/Pictures/screenshot-split-`date +%F`.png")
    ("s-Print" "scrot -u -F ~/Pictures/screenshot-activewin-`date +%F`.png")
    ("XF86AudioRaiseVolume" "volume-up")
    ("XF86AudioLowerVolume" "volume-down")
    ("XF86AudioMute" "toggle-mute")))

;; Set Shell Keys
(defvar *my-shell-key-commands*
  '(("c" "st")
    ("C-c" "st")
    ("l" "slock")
    ("M-b" "feh --bg-fill $(shuf -n1 -e /usr/local/share/backgrounds/*)")))

;; Set App Keys
(defvar *my-app-key-commands*
  '(("E" "claws-mail")
    ("F" "pcmanfm")))

;; Set Rofi Keys
(defvar *my-rofi-key-commands*
  '(("SPC" "rofi -i -show-icons -show drun")
    ("RET" "rofi -i -show-icons -show window")))

;; Raw StumpWM Window-managing Commands
(defvar *my-wm-window-commands*
  '(("M-ESC" "mode-line")
    ("M-q" "quit")
    ("m" "mark")
    ("x" "xkill")
    ("M" "gmove-marked")
    ("C-Up" "exchange-direction up")
    ("C-Down" "exchange-direction down")
    ("C-Left" "exchange-direction left")
    ("C-Right" "exchange-direction right")
    ("p" "toggle-float")
    ("M-p" "flatten-floats")))

;; Raw StumpWM Module Commands
(defvar *my-wm-module-commands*
  '(("f" "browse")
    ("s-e" "emacs-daemon-kill-force")
    ("e" "swm-emacs")
    ("C-e" "swm-emacs")))
#+END_SRC

*** Loop Bind Keylists

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Loop & Bind with Macros from earlier
;;;

;; Bind shell keys to *app-map*
(defvar *my-shell-key-thread*
  (loop-and-bind *my-shell-key-commands* bind-shell-to-key *app-map*))

;; Bind app keys to *app-map*
(defvar *my-app-key-thread*
  (loop-and-bind *my-app-key-commands* bind-shell-to-key *app-map*))

;; Bind rofi keys to *app-map*
(defvar *my-rofi-key-thread*
  (loop-and-bind *my-rofi-key-commands* bind-shell-to-key *app-map*))

;; Bind module command keys to *app-map*
(defvar *my-wm-module-thread*
  (loop-and-bind *my-wm-module-commands* bind-to-key *app-map*))

;; Bind shell keys to *root-map*
(defvar *my-shell-key-thread2*
  (loop-and-bind *my-shell-key-commands* bind-shell-to-key *root-map*))

;; Bind app keys to *root-map*
(defvar *my-app-key-thread2*
  (loop-and-bind *my-app-key-commands* bind-shell-to-key *root-map*))

;; Bind rofi keys to *root-map*
(defvar *my-rofi-key-thread2*
  (loop-and-bind *my-rofi-key-commands* bind-shell-to-key *root-map*))

;; Bind module command keys to *rootmap*
(defvar *my-wm-module-thread2*
  (loop-and-bind *my-wm-module-commands* bind-to-key *root-map*))

;; Bind special keys to *top-map*
(defvar *my-special-key-thread*
  (loop-and-bind *my-special-key-commands* bind-shell-to-key *top-map*))

;; Bind window management command keys to *root-map*
(defvar *my-wm-window-thread*
  (loop-and-bind *my-wm-window-commands* bind-to-key *root-map*))
#+END_SRC

*** Define New Keymaps

#+BEGIN_SRC lisp :tangle bind.lisp
(define-key *root-map* (kbd "M-s") '*search-map*)
(define-key *root-map* (kbd "M-a") '*app-map*)
#+END_SRC

** jumps.lisp

These are my Web/Term jump macros for /easy-peasy/ manpage searching or websurfing

*** Define Jump Macros

#+BEGIN_SRC lisp :tangle jumps.lisp
;;;
;; Jump Macros
;;;

;; Term Jump commands
(defmacro make-term-jump (name command term)
 `(defcommand ,(intern name) (search)
    ((:rest ,(concatenate 'string name " termsearch: ")))
    (nsubstitute #\+ #\Space search)
    (run-shell-command (format nil "~a -e sh -c '~a ~a | most'" ,term ,command search))))
#+END_SRC

*** Define Browser Jumps

#+BEGIN_SRC lisp :tangle jumps.lisp
;;
; Browser
;;

;; Module Settings
; Set homepage
(setf browse::*homepage* "http://68k.news")

; Set browser exe
(setf searchengines:*search-browser-executable* "firefox-esr")

;; Macro for search engine defines
(defmacro define-searchengine (selection-name prompt-name url description key-selection key-prompt)
 `(progn
    (searchengines:make-searchengine-selection ,selection-name ,url ,description :map *search-map* :key ,key-selection)
    (searchengines:make-searchengine-prompt ,prompt-name ,description ,url ,description :map *search-map* :key ,key-prompt)))

;; Set Search Engine Params
(defparameter *URL-DDG* "https://duckduckgo.com/?q=~a")
(defparameter *URL-LIBRE* "https://search.ahwx.org/search.php?q=~a")
(defparameter *URL-PORTS* "https://openports.eu/search?q=~a")

(define-searchengine "search-ddg-selection" "search-ddg-prompt" *URL-DDG* "DuckDuckGo search" "M-C-s" "M-s")
(define-searchengine "search-libre-selection" "search-libre-prompt" *URL-LIBRE* "LibreY search" "M-C-l" "M-l")
(define-searchengine "search-ports-selection" "search-ports-prompt" *URL-PORTS* "Ports Search" "M-C-o" "M-o")
#+END_SRC

*** Set Jump Aliases

#+BEGIN_SRC lisp :tangle jumps.lisp
;;;
;; Define Jumps
;;;

;; Define Terminal Jumps
(make-term-jump "mansearch" "apropos" "st")
(make-term-jump "manpage" "man" "st")
(make-term-jump "pkgname" "pkg_info -Q" "st")
(make-term-jump "pkgloc" "pkg_locate" "st")
#+END_SRC

*** Bind Jump Aliases

#+BEGIN_SRC lisp :tangle jumps.lisp
;;;
;; Bind Jump Defines from Earlier
;;;

;; Keybindings for Terminal Jumps
(define-key *search-map* (kbd "M-m") "mansearch")
(define-key *search-map* (kbd "M-M") "manpage")
(define-key *search-map* (kbd "M-p") "pkgname")
(define-key *search-map* (kbd "M-P") "pkgloc")
#+END_SRC

** autostart.lisp

#+BEGIN_SRC lisp :tangle autostart.lisp

;; Start Slynk Server
(ql:quickload :slynk)
(slynk:create-server :dont-close t)

;; Play Startup sound
(defun play-startup-sound ()
  (run-shell-command "sleep 1 && ffplay -autoexit -nodisp ~/.local/sfx/okdesuka.wav"))

(defun set-default-sounds ()
  (run-shell-command "sndioctl input.level=0.74")
  (run-shell-command "sndioctl output.level=1.00"))

;; Startup Sound
(set-default-sounds)
(play-startup-sound)

;; which-key interactive
(which-key-mode)

;; Finish Threads
(defvar *bind-thread-list*
  (list *my-special-key-thread*
	,*my-wm-window-thread*
	,*my-shell-key-thread*
	,*my-app-key-thread*
	,*my-rofi-key-thread*
	,*my-wm-module-thread*
	,*my-shell-key-thread2*
	,*my-app-key-thread2*
	,*my-rofi-key-thread2*
	,*my-wm-module-thread2*))
(dolist (threadname *bind-thread-list*)
  (sb-thread:join-thread threadname))
#+END_SRC
-----
