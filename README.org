
- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[./LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- /Use with *caution*/


* Table of Contents :TOC_4:
- [[#binds][Binds]]
  - [[#apps][Apps]]
  - [[#player-commands][Player Commands]]
  - [[#window-management][Window Management]]
  - [[#misc][Misc]]
  - [[#search--termjumps][Search & Termjumps]]
    - [[#note][/Note/]]
- [[#code-structure][Code Structure]]
  - [[#initlisp][init.lisp]]
    - [[#wm-boilerplate][WM Boilerplate]]
    - [[#colors][Colors]]
    - [[#styling][Styling]]
    - [[#environment-variables][Environment Variables]]
    - [[#modules][Modules]]
    - [[#load-in-bindsjumps][Load in binds/jumps]]
    - [[#window-groups][Window Groups]]
    - [[#modeline-formatting][Modeline Formatting]]
    - [[#cleanup-and-autostarts][Cleanup and Autostarts]]
  - [[#bindlisp][bind.lisp]]
    - [[#set-key-prefix][Set Key Prefix]]
    - [[#remove-default-binds][Remove default binds]]
    - [[#define-new-interactive-keymaps][Define New Interactive Keymaps]]
    - [[#define-key-macros][Define Key Macros]]
    - [[#define-toggle-float-command][Define toggle-float command]]
    - [[#define-bind-keylists][Define Bind Keylists]]
    - [[#loop-bind-keylists][Loop Bind Keylists]]
  - [[#jumpslisp][jumps.lisp]]
    - [[#define-jump-macros][Define Jump Macros]]
    - [[#define-browse-jumps][Define Browse Jumps]]
    - [[#set-jump-aliases][Set Jump Aliases]]
    - [[#bind-jump-aliases][Bind Jump Aliases]]
  - [[#autostartlisp][autostart.lisp]]

* Binds

/Note/ this may become out of date, please refer to the code for the binds

** Apps

| Prefix | Bind     | Function                         |
|--------+----------+----------------------------------|
| =M-a=    | =c= /OR/ =C-c= | open suckless term               |
| =M-a=    | =f=        | open firefox                     |
| =M-a=    | =F=        | open pcmanfm                     |
| =M-a=    | =E=        | open claws-mail                  |
| =M-a=    | =e= /OR/ =C-e= | open emacs daemon /OR/ open client |
| =M-a=    | =s-e=      | force kill emacs daemon          |
| =M-a=    | =Space=    | rofi drun menu                   |
| =M-a=    | =Return=   | rofi window select menu          |
| =M-a=    | =M-b=      | shuffle background               |
| =M-a=    | =l=        | lock screen with slock           |

** Player Commands

| Prefix | Bind | Function       |
|--------+------+----------------|
| =M-m=    | =p=    | play/pause     |
| =M-m=    | =s=    | stop           |
| =M-m=    | =n=    | next           |
| =M-m=    | =b=    | previous       |
| =M-m=    | =z=    | toggle shuffle |
| =M-m= | =XF86AudioRaiseVolume= | player volume up 5% |
| =M-m= | =XF86AudioLowereVolume= | player volume down 5% |

** Window Management

| Prefix | Bind                       | Function                                     |
|--------+----------------------------+----------------------------------------------|
| =C-t=    | =s=                          | vertical split                               |
| =C-t=    | =S=                          | horizontal split                             |
| =C-t=    | =Q=                          | maximize frame                               |
| =C-t=    | =<Direction-Key>= /OR/ =<Click>= | select frame to focus                        |
| =C-t=    | =C-<Direction-Key>=          | swap frame in direction                      |
| =C-t=    | =k=                          | kill active frame                            |
| =C-t=    | =m=                          | select frame for bulk move                   |
| =C-t=    | =M=                          | move bulk select to group                    |
| =C-t=    | =FnKey=                      | switch to group                              |
| =C-t=    | =n=                          | rotate frame                                 |
| =C-t=    | =R=                          | resize mode                                  |
| =C-t=    | =x=                          | open xkill (like force-quit on macOS X)      |
| =C-t=    | =p=                          | toggle push/pop frame to/from floating group |
| =C-t=    | =M-p=                        | "flatten" all floating windows to frame      |
| =C-t=    | =q=                          | Prompt to exit session                       |
| =C-t=    | =M-q=                        | Quick exit session                           |
| =C-t=    | =M-Escape=                   | Toggle Modeline                              |

** Misc

| Prefix | Bind          | Function                        |
|--------+---------------+---------------------------------|
| =NONE=   | =PrintScreen=   | screenshot full                 |
| =NONE=   | =M-PrintScreen= | screenshot interactive select   |
| =NONE=   | =s-PrintScreen= | screenshot active frame/window  |

** Search & Termjumps

| Prefix | Bind | Function                         |
|--------+------+----------------------------------|
| =M-s=    | =C-s=  | Search Duckduckgo for selection  |
| =M-s=    | =s=    | Search Duckduckgo for prompt     |
| =M-s=    | =C-l=  | Search LibreY for selection      |
| =M-s=    | =l=    | Search LibreY for prompt         |
| =M-s=    | =C-o=  | Search Package Web for selection |
| =M-s=    | =o=    | Search Package Web for prompt    |
| =M-s=    | =m=    | Search Manpages                  |
| =M-s=    | =M=    | Open Manpage                     |
| =M-s=    | =p=    | Search Package Name              |
| =M-s=    | =P=    | Search Package File              |

*** /Note/

when a window is in floating mode,
+ the =Super= key is the prefix
+ left click (and drag) is move
+ right click (and drag) is resize
+ you can only mark (and move) frames, so flatten any floating windows before swapping groups

* Code Structure
** init.lisp

This is the first thing the WM Loads.

*** WM Boilerplate

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; StumpWM Boilerplate
;;;

;; Quicklisp Setup
(let ((quicklisp-init (merge-pathnames ".quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;; no style-warns
(declaim #+sbcl(sb-ext:muffle-conditions style-warning))

;; this automatically prefixes 'stumpwm:' to commands that need it
(in-package :stumpwm)
(setf *default-package* :stumpwm)

;; Set Modules
(set-module-dir "~/.stumpwm.d/modules")

;; Load Slynk Package
(ql:quickload :slynk)
#+END_SRC

*** Colors

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Colors
;;;

;; Colormap
(defvar iz-black "#282828")
(defvar iz-red "#CC241D")
(defvar iz-softred "#FB4934")
(defvar iz-green "#98971A")
(defvar iz-softgreen "#B8BB26")
(defvar iz-yellow "#D79921")
(defvar iz-softyellow "#FABD2F")
(defvar iz-blue "#458588")
(defvar iz-softblue "#83A598")
(defvar iz-purple "#B16286")
(defvar iz-softpurple "#D3869B")
(defvar iz-aqua "#689D6A")
(defvar iz-softaqua "#8EC07C")
(defvar iz-orange "#D65D0E")
(defvar iz-softorange "#FE8019")
(defvar iz-white "#EBDBB2")
(defvar iz-gray "#928374")

;; Color list for `^` formatting
(setf *colors* (list iz-black ;; ^0
                     iz-softred ;; ^1
                     iz-softgreen ;; ^2
                     iz-yellow ;; ^3
                     iz-softblue ;; ^4
                     iz-softpurple ;; ^5
                     iz-softaqua ;; ^6
                     iz-white ;; ^7
                     iz-softorange ;; ^8
                     iz-gray ;; ^9
                     ))
;; Set those colors
(update-color-map (current-screen))
#+END_SRC

*** Styling

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Styling
;;;

;; Set font and colors for the message window
(set-fg-color iz-white)
(set-bg-color iz-black)
(set-border-color iz-white)
(set-msg-border-width 3)
(set-font "-*-spleen-*-*-*-*-16-*-*-*-*-*-*-*")

;; MouseKeys
(setf *mouse-focus-policy* :click
      ,*float-window-modifier* :SUPER)

;; Welcome
(setq *startup-message* (format nil "^B^8Welcome Izzy!")) ;; Orange

;; Set focus and unfocus colors
(set-focus-color iz-white)
(set-unfocus-color iz-gray)
(set-float-focus-color iz-aqua)
(set-float-unfocus-color iz-softaqua)
#+END_SRC

*** Environment Variables

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Env Vars
;;;

;; Set env vars
(setf (getenv "PATH") "/home/izder456/.npm-global/bin:/home/izder456/.cargo/bin:/home/izder456/.local/bin:/home/izder456/.emacs.d/bin:/home/izder456/.local/share/pkg/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:/usr/local/jdk-17/bin")
(setf (getenv "PAGER") "less -R")
#+END_SRC

*** Modules

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Modules & their config
;;;

;; Init modules
(init-load-path *module-dir*)
(add-to-load-path "~/.stumpwm.d/extras/scratchpad")

(defvar *modulenames*
  (list "swm-gaps"
	"swm-emacs"
	"scratchpad"
	"hostname"
	"battery-portable"
	"stumpwm-sndioctl"
	"browse"
	"searchengines"))

(dolist (modulename *modulenames*)
  (load-module modulename))

;;
;; Module Settings
;;
;; swm-gapes
;; Set Gaps
(setf swm-gaps:*inner-gaps-size* 6
      swm-gaps:*outer-gaps-size* 6)
;; Turn em on
(swm-gaps:toggle-gaps-on)

;; scratchpad
;; define default scratchpad term
(defcommand scratchpad-term () ()
            (scratchpad:toggle-floating-scratchpad "term" "st"
                                                   :initial-gravity :center
                                                   :initial-width 720
                                                   :initial-height 480))
;; Bind Scratchpad to Super+t
(define-key *top-map* (kbd "s-t") "scratchpad-term")
#+END_SRC

*** Load in binds/jumps

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Load in other files
;;;

;; binds
(load "~/.stumpwm.d/bind.lisp")

;; jumps
(load "~/.stumpwm.d/jumps.lisp")
#+END_SRC

*** Window Groups

#+BEGIN_SRC lisp :tangle init.lisp
;; Rename and create new groups
(when *initializing*
  (grename "Ness")
  (gnewbg "Paula")
  (gnewbg "Jeff")
  (gnewbg "Poo"))

;; Group format
(setf *group-format* "%n %t")

;; Window format
(setf *window-format* (format NIL "^(:fg \"~A\")<%25t>" iz-softgreen)
      ,*window-border-style* :tight
      ,*normal-border-width* 3)

;; Time format
(setf *time-modeline-string* "%a, %b %d @%I:%M%p")

;; Message window settings
(setf *message-window-padding* 6
      ,*message-window-y-padding* 6
      ,*message-window-gravity* :bottom)

;; Input window settings
(setf *input-window-gravity* :center)
#+END_SRC

*** Modeline Formatting

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Define Functions
;;;

;; Run a shell command and format the output
(defun run-shell-command-and-format (command)
  (substitute #\Space #\Newline (run-shell-command command t)))

;; Show the kernel version
(defun show-kernel ()
  (run-shell-command-and-format "uname -r"))

;; Show the temperature
(defun show-temp ()
  (run-shell-command-and-format "sysctl -n hw.sensors.cpu0.temp0"))

;; Show Volume
(defun show-output-vol ()
  (run-shell-command-and-format "sndioctl -n output.level"))
(defun show-input-vol ()
  (run-shell-command-and-format "sndioctl -n input.level"))

;; Player Stuffs
(defun show-current-track ()
  (run-shell-command-and-format
   "playerctl metadata --format '|{{truncate(uc(status), 1)}}: [{{duration(position)}}] V@{{trunc(volume, 5)}}|'"))

;; Show the window title
(defun show-window-title ()
  (substitute #\Space #\Newline (window-title (current-window))))

;;;
;; Formatting
;;;

;; Break out modeline formatting
;; Constants
(defvar pipe "|")

;; Format Lists
(defvar group-fmt (list
		   "^n%g" ;; Default
		   ))
(defvar win-fmt (list
		 "^n%v ^>^7" ;; Default -> Right Allign
		 ))
(defvar audio-fmt (list
		   " " '(:eval (show-input-vol))
		   "/"
		   " " '(:eval (show-output-vol))
		   '(:eval (show-current-track))
		   ))
(defvar status-fmt (list
		    "^n" pipe ;; Default
		    " %B " pipe ;; Battery
		    " " '(:eval (show-temp)) pipe ;; Cpu Temp
		    " %d " pipe ;; Date
		    ))

;; Screen mode line format
(setf *screen-mode-line-format*
      (list "(" ;; Yellow
	    group-fmt
	    "^1 [ " ;; Red
	    win-fmt
	    "^1] " ;; Red
	    "^6{" ;; Aqua
	    audio-fmt
	    "^6} " ;; Aqua
	    "^5[" ;; Magenta
	    status-fmt
	    "^5]" ;; Magenta
	    "^3)" ;; Yellow
	    ))

;; Format Modeline
(setf *mode-line-background-color* iz-black
      ,*mode-line-foreground-color* iz-softyellow
      ,*mode-line-border-color* iz-white
      ,*mode-line-border-width* 3
      ,*mode-line-pad-x* 6
      ,*mode-line-pad-y* 6
      ,*mode-line-timeout* 1)

;; Toggle mode line display
(toggle-mode-line (current-screen) (current-head))
#+END_SRC

*** Cleanup and Autostarts

#+BEGIN_SRC lisp :tangle init.lisp
;; cleanup/autostart
(load "~/.stumpwm.d/autostart.lisp")
#+END_SRC

** bind.lisp

Handling bindings

*** Set Key Prefix

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Bindings
;;;

;; Set prefix key
(set-prefix-key (kbd "C-t"))
#+END_SRC

*** Remove default binds

#+BEGIN_SRC lisp :tangle bind.lisp
;; gross binds
(defvar *gross-default-binds*
  (list "c" "C-c" "e" "C-e" "d" "C-d" "SPC"
        "i" "f" "C-k" "w" "C-w" "a" "C-a"
        "C-t" "R" "o" "TAB" "F" "C-h" "v"
        "#" "m" "C-m" "l" "C-l" "G" "C-N"
        "A" "X" "C-SPC" "I" "r" "W" "+"
        "RET" "C-RET" "C-0" "C-1" "C-2"
        "C-3" "C-4" "C-5" "C-6" "C-7"
        "C-8" "C-9" "0" "1" "2" "3" "4"
        "5" "6" "7" "8" "9"))
;; yuck!
(dolist (bind *gross-default-binds*)
  (define-key *root-map* (kbd bind) NIL))
#+END_SRC

*** Define New Interactive Keymaps

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Make New Keymaps
;;;
(defmacro make-keymap (map-name key-binding &optional root top)
  `(progn
     (defvar ,map-name
       (let ((map (make-sparse-keymap)))
	 map))
     (when ,root
       (define-key *root-map* (kbd ,key-binding) ,map-name))
     (when ,top
       (define-key *top-map* (kbd ,key-binding) ,map-name))))

(make-keymap *search-map* "M-s" t t)
(make-keymap *media-map* "M-m" t t)
(make-keymap *app-map* "M-a" t t)
#+END_SRC
*** Define Key Macros

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Bind Macro
;;;

;; Bind shell command to a specified map (default is *root-map*)
(defmacro bind-shell-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string "run-shell-command " ,command)))

;; Bind stumpwm command to a specified map (default is *root-map*)
(defmacro bind-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) ,command))

;;;
;; Loop & Bind Macro
;;;

;; Loop through keybind lists and bind them
(defmacro loop-and-bind (key-cmd-list bind-macro &optional (map *root-map*))
  `(sb-thread:make-thread
    (lambda ()
      (dolist (key-cmd ,key-cmd-list) (,bind-macro (first key-cmd) (second key-cmd) ,map)))))
#+END_SRC

*** Define toggle-float command

#+BEGIN_SRC lisp :tangle bind.lisp
;; Push/Pop Current Window Into a Floating group
(defcommand toggle-float () ()
            (sb-thread:make-thread
             (lambda ()
               (if (float-window-p (current-window))
                   (unfloat-this)
                 (float-this)))))
#+END_SRC

*** Define Bind Keylists

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Bind Key Lists
;;;

;; Set Special keys
(defvar *my-special-key-commands*
  '(("Print" "scrot -F ~/Pictures/screenshot-`date +%F`.png")
    ("M-Print" "scrot -s -F ~/Pictures/screenshot-split-`date +%F`.png")
    ("s-Print" "scrot -u -F ~/Pictures/screenshot-activewin-`date +%F`.png")
    ("XF86AudioRaiseVolume" "volume-up")
    ("XF86AudioLowerVolume" "volume-down")
    ("XF86AudioMute" "toggle-mute")))

;; Set Shell Keys
(defvar *my-shell-key-commands*
  '(("c" "st")
    ("C-c" "st")
    ("l" "slock")
    ("M-b" "feh --bg-fill $(shuf -n1 -e /usr/local/share/backgrounds/*)")))

;; Set App Keys
(defvar *my-app-key-commands*
  '(("E" "claws-mail")
    ("F" "pcmanfm")))

;; Set Rofi Keys
(defvar *my-rofi-key-commands*
  '(("SPC" "rofi -i -show-icons -show drun")
    ("RET" "rofi -i -show-icons -show window")))

;; Set Playerctl Keys
(defvar *my-media-key-commands*
  '(("p" "playerctl play-pause")
    ("s" "playerctl stop")
    ("b" "playerctl previous")
    ("n" "playerctl next")
    ("z" "playerctl shuffle toggle")
    ("XF86AudioRaiseVolume" "playerctl volume 0.05+")
    ("XF86AudioLowerVolume" "playerctl volume 0.05-")))

;; Raw StumpWM Window-managing Commands
(defvar *my-wm-window-commands*
  '(("M-ESC" "mode-line")
    ("M-q" "quit")
    ("m" "mark")
    ("x" "xkill")
    ("M" "gmove-marked")
    ("C-Up" "exchange-direction up")
    ("C-Down" "exchange-direction down")
    ("C-Left" "exchange-direction left")
    ("C-Right" "exchange-direction right")
    ("p" "toggle-float")
    ("M-p" "flatten-floats")))

;; Raw StumpWM Module Commands
(defvar *my-wm-module-commands*
  '(("f" "browse")
    ("s-e" "emacs-daemon-kill-force")
    ("e" "swm-emacs")
    ("C-e" "swm-emacs")))
#+END_SRC

*** Loop Bind Keylists

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Loop & Bind with Macros from earlier
;;;
;; List of binds
(defparameter *key-bindings*
  '((*my-shell-key-thread* *my-shell-key-commands* bind-shell-to-key *app-map*)
    (*my-app-key-thread* *my-app-key-commands* bind-shell-to-key *app-map*)
    (*my-rofi-key-thread* *my-rofi-key-commands* bind-shell-to-key *app-map*)
    (*my-wm-module-thread* *my-wm-module-commands* bind-to-key *app-map*)
    (*my-special-key-thread* *my-special-key-commands* bind-shell-to-key *top-map*)
    (*my-media-key-thread* *my-media-key-commands* bind-shell-to-key *media-map*)
    (*my-wm-window-thread* *my-wm-window-commands* bind-to-key *root-map*)))

;; Loop over list
(dolist (binding *key-bindings*)
  (destructuring-bind (name commands binding-fn map) binding
    (eval `(defvar ,name
             (loop-and-bind ,commands ,binding-fn ,map)))))
#+END_SRC

** jumps.lisp

These are my Web/Term jump macros for /easy-peasy/ manpage searching or websurfing

*** Define Jump Macros

#+BEGIN_SRC lisp :tangle jumps.lisp
;;;
;; Jump Macros
;;;

;; Term Jump commands
(defmacro make-term-jump (name command term)
  `(defcommand ,(intern name) (search)
               ((:rest ,(concatenate 'string name " termsearch: ")))
               (nsubstitute #\+ #\Space search)
               (run-shell-command (format nil "~a -e sh -c '~a ~a | less -R'" ,term ,command search))))
#+END_SRC

*** Define Browse Jumps

#+BEGIN_SRC lisp :tangle jumps.lisp
;;
;; Browser
;;

;; Module Settings
;; Set homepage
(setf browse::*homepage* "http://68k.news")

;; Set browser exe
(setf searchengines:*search-browser-executable* "firefox-esr")

;; Macro for search engine defines
(defmacro define-searchengine (selection-name prompt-name url description key-selection key-prompt)
  `(progn
     (searchengines:make-searchengine-selection ,selection-name ,url ,description :map *search-map* :key ,key-selection)
     (searchengines:make-searchengine-prompt ,prompt-name ,description ,url ,description :map *search-map* :key ,key-prompt)))

;; Set Search Engine Params
(defparameter *URL-DDG* "https://duckduckgo.com/?q=~a")
(defparameter *URL-LIBRE* "https://search.ahwx.org/search.php?q=~a")
(defparameter *URL-PORTS* "https://openports.eu/search?q=~a")

(define-searchengine "search-ddg-selection" "search-ddg-prompt" *URL-DDG* "DuckDuckGo search" "C-s" "s")
(define-searchengine "search-libre-selection" "search-libre-prompt" *URL-LIBRE* "LibreY search" "C-l" "l")
(define-searchengine "search-ports-selection" "search-ports-prompt" *URL-PORTS* "Ports Search" "C-o" "o")
#+END_SRC

*** Set Jump Aliases

#+BEGIN_SRC lisp :tangle jumps.lisp
;;;
;; Define Jumps
;;;

;; Define Terminal Jumps
(make-term-jump "mansearch" "apropos" "st")
(make-term-jump "manpage" "man" "st")
(make-term-jump "pkgname" "pkg_info -Q" "st")
(make-term-jump "pkgloc" "pkg_locate" "st")
#+END_SRC

*** Bind Jump Aliases

#+BEGIN_SRC lisp :tangle jumps.lisp
;;;
;; Bind Jump Defines from Earlier
;;;
;; Keybindings for Terminal Jumps
(define-key *search-map* (kbd "m") "mansearch")
(define-key *search-map* (kbd "M") "manpage")
(define-key *search-map* (kbd "p") "pkgname")
(define-key *search-map* (kbd "P") "pkgloc")
#+END_SRC

** autostart.lisp

#+BEGIN_SRC lisp :tangle autostart.lisp
;; Play Startup sound
(defun play-startup-sound ()
  (run-shell-command "sleep 1 && ffplay -autoexit -nodisp ~/.local/sfx/okdesuka.wav"))
(defun set-default-sounds ()
  (run-shell-command "sndioctl input.level=0.74")
  (run-shell-command "sndioctl output.level=1.00"))

(when *initializing*
  ;; Startup Sound
  (set-default-sounds)
  (play-startup-sound)
  ;; which-key interactive
  (which-key-mode)
  ;; start slynk server
  (slynk:create-server
   :dont-close t))

;; Finish Threads
(defvar *bind-thread-list*
  (list *my-special-key-thread*
        ,*my-wm-window-thread*
        ,*my-shell-key-thread*
        ,*my-app-key-thread*
        ,*my-rofi-key-thread*
        ,*my-media-key-thread*
        ,*my-wm-module-thread*))
(dolist (threadname *bind-thread-list*)
  (sb-thread:join-thread threadname))
#+END_SRC
