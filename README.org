#+TITLE: Iz's StumpWM Config
#+DESCRIPTION: Mainly for personal backups, but if you want 'em, use 'em.
#+KEYWORDS: org-mode, stumpwm, readme, lisp, izder
#+LANGUAGE: en

+ Mainly for personal backups, but if you want 'em, use 'em!

+ /I won't provide support for any issues on your machine, as this is a pet project./

-----

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- /Use with *caution*/

-----

* Code Structure

** [[init.lisp][=init.lisp=]]

This is the first thing the WM Loads.

*** =WM-BOILERPLATE=

#+BEGIN_SRC lisp :tangle init.lisp
;; Quicklisp Setup
(let ((quicklisp-init (merge-pathnames ".quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;; this automatically prefixes 'stumpwm:' to commands that need it
(in-package :stumpwm)
(setf *default-package* :stumpwm)

;; Set Modules
(set-module-dir "/home/izder456/.stumpwm.d/modules")

;; Colors Gruv Super List
(defvar iz-black "#282828")
(defvar iz-red "#CC241D")
(defvar iz-softred "#FB4934")
(defvar iz-green "#98971A")
(defvar iz-softgreen "#B8BB26")
(defvar iz-yellow "#D79921")
(defvar iz-softyellow "#FABD2F")
(defvar iz-blue "#458588")
(defvar iz-softblue "#83A598")
(defvar iz-purple "#B16286")
(defvar iz-softpurple "#D3869B")
(defvar iz-aqua "#689D6A")
(defvar iz-softaqua "#8EC07C")
(defvar iz-orange "#D65D0E")
(defvar iz-softorange "#FE8019")
(defvar iz-white "#EBDBB2")
(defvar iz-gray "#928374")

;; Set font and colors for the message window
(set-fg-color iz-white)
(set-bg-color iz-black)
(set-border-color iz-white)
(set-msg-border-width 4)
(set-font "-misc-spleen-medium-r-normal--16-160-72-72-c-80-iso10646-1")
(setf *mouse-focus-policy* :click)
(run-shell-command "xsetroot -cursor_name left_ptr")
(setq *startup-message* (format nil "Welcome Izzy!"))

;; Set env vars
(setf (getenv "GDK_CORE_DEVICE_EVENTS") "1")
(setf (getenv "PAGER") "most")
(setf (getenv "TERM") "xterm-256color")
(setf (getenv "PKG_PATH") "https://cdn.OpenBSD.org/pub/OpenBSD/snapshots/packages/amd64")

;; Set Gaps
(load-module "swm-gaps")
(setf swm-gaps:*inner-gaps-size* 10)
(setf swm-gaps:*outer-gaps-size* 12)

;; Turn em onV
(swm-gaps:toggle-gaps-on)

;; Mode line settings
(setf *mode-line-background-color* iz-black
      ,*mode-line-foreground-color* iz-softyellow
      ,*mode-line-border-color* iz-white
      ,*mode-line-border-width* 4
      ,*mode-line-pad-x* 16
      ,*mode-line-pad-y* 14
      ,*mode-line-timeout* 5)

;; Set focus and unfocus colors
(set-focus-color iz-white)
(set-unfocus-color iz-gray)
#+END_SRC

*** =GROUP-SETTING=

#+BEGIN_SRC lisp :tangle init.lisp
;; Rename and create new groups
(grename "Ness")
(gnewbg "Paula")
(gnewbg "Jeff")
(gnewbg "Poo")

;; Group format
(setf *group-format* "%n %t")

;; Time modeline format
(setf *time-modeline-string* "%a, %b%d @%I:%M%p")

;; Window format
(setf *window-format* (format NIL "^b^(:fg \"~A\")<%25t>" iz-softgreen))
(setf *window-border-style* :tight)
(setf *normal-border-width* 4)

;; Message window settings
(setf *message-window-padding* 16)
(setf *message-window-y-padding* 14)
(setf *message-window-gravity* :center)

;; Input window settings
(setf *input-window-gravity* :center)
#+END_SRC

*** =MODE-LINE=

#+BEGIN_SRC lisp :tangle init.lisp
;; Run a shell command and format the output
(defun run-shell-command-and-format (command)
  (substitute #\Space #\Newline (run-shell-command command t)))

;; Show the kernel version
(defun show-kernel ()
  (run-shell-command-and-format "uname -r"))

;; Show the hostname
(defun show-hostname ()
  (run-shell-command-and-format "hostname"))

;; Show battery information
(defun show-battery ()
  (run-shell-command-and-format "battstat -c '++' -d '--' {i} {p}"))

;; Show the temperature
(defun show-temp ()
  (run-shell-command-and-format "sysctl -n hw.sensors.cpu0.temp0"))

;; Show the window title
(defun show-window-title ()
  (substitute #\Space #\Newline (window-title (current-window))))

;; Screen mode line format
(setf stumpwm:*screen-mode-line-format*
      (list "%g | %v ^>^7 | "
            '(:eval (show-hostname))
            "| " '(:eval (show-kernel))
            "| " '(:eval (show-battery))
            "| " '(:eval (show-temp))
            "| %d"))

;; Toggle mode line display
(toggle-mode-line (current-screen) (current-head))
#+END_SRC

*** =AUTOSTART=

#+BEGIN_SRC lisp :tangle init.lisp
;; Load BIND file
(load "~/.stumpwm.d/bind.lisp")

;; Load JUMPS file
(load "~/.stumpwm.d/jumps.lisp")
#+END_SRC

-----

** [[bind.lisp][=bind.lisp=]]

This is my bindings file. =*root-map*= is a variable that handles /Prefixed/ bindings, whereas =*top-map*= is a variable that handles /Non-Prefixed/ bindings.

*** =SET-PREFIX=

#+BEGIN_SRC lisp :tangle bind.lisp
;; Set prefix key
(set-prefix-key (kbd "C-t"))
#+END_SRC

*** =SET-MACROS=

#+BEGIN_SRC lisp :tangle bind.lisp
;; Bind to *root-map*
(defmacro bind-shell-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string
                                            "run-shell-command "
                                            ,command)))

;; Bind to *top-map*
(defmacro bind-shell-to-topkey (key command &optional (map *top-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string
                                            "run-shell-command "
                                            ,command)))

;; Bind roft command to *root-map*
(defmacro bind-rofi-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string
                                            "run-shell-command "
                                            '"rofi -i -show-icons -show "
                                            ,command)))
#+END_SRC

*** =DEFINE-BIND-LISTS=

#+BEGIN_SRC lisp :tangle bind.lisp
;; Set Rofi Keys
(defvar *my-rofi-key-commands*
  '(("SPC" "drun")
    ("RET" "window")))

;; Set Special keys
(defvar *my-special-key-commands*
           '(("Print" "scrot -F ~/Pictures/screenshot-`date +%F`.png")
             ("M-Print" "scrot -s -F ~/Pictures/screenshot-split-`date +%F`.png")
             ("s-Print" "scrot -u -F ~/Pictures/screenshot-activewin-`date +%F`.png")
             ("XF86AudioRaiseVolume" "sndioctl output.level=+0.05")
             ("XF86AudioLowerVolume" "sndioctl output.level=-0.05")
             ("XF86AudioMute" "sndioctl output.level=\!")))

;; Set App Keys
(defvar *my-app-key-commands*
           '(("c" "alacritty")
            ("C-c" "alacritty")
            ("f" "ungoogled-chromium")
            ("E" "thunderbird")
            ("F" "caja")
            ("x" "xkill")
            ("l" "slock")
            ("M-b" "feh --bg-fill $(shuf -n1 -e /usr/local/share/backgrounds/*)")))
#+END_SRC

*** =LOOP-BIND-LISTS=

#+BEGIN_SRC lisp :tangle bind.lisp
;; Loop through keybind lists
(loop for (key cmd) in *my-rofi-key-commands* do
  (bind-rofi-to-key key cmd))

(loop for (key cmd) in *my-app-key-commands* do
  (bind-shell-to-key key cmd))

(loop for (key cmd) in *my-special-key-commands* do
  (bind-shell-to-topkey key cmd))
#+END_SRC

*** =FINAL-MISC-BINDS=

#+BEGIN_SRC lisp :tangle bind.lisp
;; Global keybindings
(define-key *top-map* (kbd "M-ESC") "mode-line")
(define-key *root-map* (kbd "M-Q") "quit")

;; Window movement/swapping
(define-key *root-map* (kbd "m") "mark")
(define-key *root-map* (kbd "M") "gmove-marked")
(define-key *root-map* (kbd "C-Up") "exchange-direction up")
(define-key *root-map* (kbd "C-Down") "exchange-direction down")
(define-key *root-map* (kbd "C-Left") "exchange-direction left")
(define-key *root-map* (kbd "C-Right") "exchange-direction right")

;; EMACS!!
(define-key *root-map* (kbd "e") "emacs")
#+END_SRC

-----

** [[jumps.lisp][=jumps.lisp=]]

These are my Web/Term jump macros for /easy-peasy/ manpage searching or websurfing

*** =DEFINE-JUMP-MACROS=

#+BEGIN_SRC lisp :tangle jumps.lisp
;; Web Jump commands
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search)
     ((:rest ,(concatenate 'string name " search: ")))
     (nsubstitute #\+ #\Space search)
     (run-shell-command (concatenate 'string ,prefix search))))

;; Term Jump commands
(defmacro make-term-jump (name prefix)
  `(defcommand ,(intern name) (search)
     ((:rest ,(concatenate 'string name " termsearch: ")))
     (nsubstitute #\+ #\Space search)
     (run-shell-command (concatenate 'string ,prefix search))))
#+END_SRC

*** =MAKE-JUMP-ALIASES=

#+BEGIN_SRC lisp :tangle jumps.lisp
;; Define Web Jumps
(make-web-jump "ddg" "ungoogled-chromium https://html.duckduckgo.com/html?q=")
(make-web-jump "lite" "ungoogled-chromium https://lite.duckduckgo.com/lite?q=")

;; Define Terminal Jumps
(make-term-jump "mansearch" "alacritty --hold -e apropos ")
(make-term-jump "manpage" "alacritty --hold -e man ")
(make-term-jump "pkgname" "alacritty --hold -e pkg_info -Q ")
(make-term-jump "pkgloc" "alacritty --hold -e pkg_locate ")
#+END_SRC

*** =BIND-JUMP-ALIASES=

#+BEGIN_SRC lisp :tangle jumps.lisp
;; Keybindings for Web Jumps
(define-key *top-map* (kbd "M-s") "ddg")
(define-key *top-map* (kbd "M-d") "lite")

;; Keybindings for Terminal Jumps
(define-key *top-map* (kbd "M-m") "mansearch")
(define-key *top-map* (kbd "M-M") "manpage")
(define-key *top-map* (kbd "M-p") "pkgname")
(define-key *top-map* (kbd "M-P") "pkgloc")
#+END_SRC

-----
