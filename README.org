#+TITLE: Iz's StumpWM Config
#+DESCRIPTION: Mainly for personal backups, but if you want 'em, use 'em.
#+KEYWORDS: org-mode, stumpwm, readme, lisp, izder
#+PROPERTY: header-args: :tangle ~/.stumpwm.d :mkdirp t

+ Mainly for personal backups, but if you want 'em, use 'em!

+ /I won't provide support for any issues on your machine, as this is a pet project./

-----

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- /Use with *caution*/

-----

* Code Structure

** [[init.lisp][init.lisp]]

This is the first thing the WM Loads.

*** WM Boilerplate

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; StumpWM Boilerplate
;;;

;; Quicklisp Setup
(let ((quicklisp-init (merge-pathnames ".quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;; this automatically prefixes 'stumpwm:' to commands that need it
(in-package :stumpwm)
(setf *default-package* :stumpwm)

;; Set Modules
(set-module-dir "~/.stumpwm.d/modules")
#+END_SRC

*** Colors

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Colors
;;;

;; Colormap
(defvar iz-black "#282828")
(defvar iz-red "#CC241D")
(defvar iz-softred "#FB4934")
(defvar iz-green "#98971A")
(defvar iz-softgreen "#B8BB26")
(defvar iz-yellow "#D79921")
(defvar iz-softyellow "#FABD2F")
(defvar iz-blue "#458588")
(defvar iz-softblue "#83A598")
(defvar iz-purple "#B16286")
(defvar iz-softpurple "#D3869B")
(defvar iz-aqua "#689D6A")
(defvar iz-softaqua "#8EC07C")
(defvar iz-orange "#D65D0E")
(defvar iz-softorange "#FE8019")
(defvar iz-white "#EBDBB2")
(defvar iz-gray "#928374")

;; Color list for `^` formatting
(setf *colors* (list iz-black ;; ^0
                     iz-red ;; ^1
                     iz-green ;; ^2
                     iz-yellow ;; ^3
                     iz-blue ;; ^4
                     iz-purple ;; ^5
                     iz-aqua ;; ^6
                     iz-white ;; ^7
                     iz-orange ;; ^8
                     iz-gray ;; ^9
                     ))
;; Set those colors
(update-color-map (current-screen))
#+END_SRC

*** Styling

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Styling
;;;

;; Set font and colors for the message window
(set-fg-color iz-white)
(set-bg-color iz-black)
(set-border-color iz-white)
(set-msg-border-width 4)
(set-font "-*-spleen-*-*-*-*-12-*-*-*-*-*-*-*")

;; Click-to-focus
(setf *mouse-focus-policy* :click)

;; Welcome
(setq *startup-message* (format nil "^B^8Welcome Izzy!")) ;; Orange

;; Set focus and unfocus colors
(set-focus-color iz-white)
(set-unfocus-color iz-gray)
(set-float-focus-color iz-aqua)
(set-float-unfocus-color iz-softaqua)

#+END_SRC

*** Environment Variables

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Env Vars
;;;

;; Set env vars
(setf (getenv "PATH") "/home/izder456/.npm-global/bin:/home/izder456/.cargo/bin:/home/izder456/.local/bin:/home/izder456/.emacs.d/bin:/home/izder456/.local/share/pkg/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:/usr/local/jdk-17/bin")
(setf (getenv "PAGER") "most")
(setf (getenv "PKG_PATH") "https://cdn.OpenBSD.org/pub/OpenBSD/snapshots/packages/amd64")
#+END_SRC

*** Modules

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Modules & their config
;;;

;; Init modules
(init-load-path *module-dir*)

;; GAAAAAPs
(load-module "swm-gaps")
;; Set Gaps
(setf swm-gaps:*inner-gaps-size* 8)
(setf swm-gaps:*outer-gaps-size* 10)
;; Turn em on
(swm-gaps:toggle-gaps-on)

;; Emacs
(load-module "swm-emacs")

;; load-path
(add-to-load-path "~/.stumpwm.d/extras/scratchpad")
;; Scratchpad
(load-module "scratchpad")
(defcommand scratchpad-term () ()
  (scratchpad:toggle-floating-scratchpad "term" "st"
                                         :initial-gravity :center
                                         :initial-width 720
                                         :initial-height 480))
;; Bind Scratchpad to Super+t
(define-key *top-map* (kbd "s-t") "scratchpad-term")

;; Hostname
(load-module "hostname")

;; Battery
(load-module "battery-portable")

;; Cleaner SNDIO interface
(load-module "stumpwm-sndioctl")
#+END_SRC

*** Window Groups

#+BEGIN_SRC lisp :tangle init.lisp
;; Rename and create new groups
(grename "Ness")
(gnewbg "Paula")
(gnewbg "Jeff")
(gnewbg "Poo")

;; Group format
(setf *group-format* "%n %t")

;; Window format
(setf *window-format* (format NIL "^(:fg \"~A\")<%25t>" iz-softgreen))
(setf *window-border-style* :tight)
(setf *normal-border-width* 4)

;; Time format
(setf *time-modeline-string* "%a, %b %d @%I:%M%p")

;; Message window settings
(setf *message-window-padding* 12)
(setf *message-window-y-padding* 10)
(setf *message-window-gravity* :center)

;; Input window settings
(setf *input-window-gravity* :center)
#+END_SRC

*** Moedeline Formatting

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Define Functions
;;;

;; Run a shell command and format the output
(defun run-shell-command-and-format (command)
  (substitute #\Space #\Newline (run-shell-command command t)))

;; Show the kernel version
(defun show-kernel ()
  (run-shell-command-and-format "uname -r"))

;; Show the temperature
(defun show-temp ()
  (run-shell-command-and-format "sysctl -n hw.sensors.cpu0.temp0"))

;; Show the window title
(defun show-window-title ()
  (substitute #\Space #\Newline (window-title (current-window))))

;;;
;; Formatting
;;;

;; Break out modeline formatting
(defvar group-fmt (list
                   "^n%g " ;; Default
                   ))
(defvar win-fmt (list
                 "^n%v ^>^7 " ;; Default -> Right Allign
                 ))
(defvar status-fmt (list
                    "^n" ;; Default
                    "| " "%h " ;; Hostname
                    "| " "%B " ;; Battery
                    "| " '(:eval (show-temp)) ;; Cpu Temp
                    "| " "%d |" ;; Date
                    ))

;; Screen mode line format
(setf *screen-mode-line-format*
      (list "^b( " ;; Yellow
            group-fmt
            "^1[ " ;; Red
            win-fmt
            "^1 ]" ;; Red
            "^5[ " ;; Magenta
            status-fmt
            "^5 ]" ;; Magenta
            "^3^b)" ;; Yellow
            ))

;; Format Modeline
(setf *mode-line-background-color* iz-black
      ,*mode-line-foreground-color* iz-softyellow
      ,*mode-line-border-color* iz-white
      ,*mode-line-border-width* 4
      ,*mode-line-pad-x* 12
      ,*mode-line-pad-y* 10
      ,*mode-line-timeout* 5)

;; Toggle mode line display
(toggle-mode-line (current-screen) (current-head))
#+END_SRC

*** Autostarts

#+BEGIN_SRC lisp :tangle init.lisp
;;;
;; Load in other files
;;;

;; binds
(load "~/.stumpwm.d/bind.lisp")

;; jumps
(load "~/.stumpwm.d/jumps.lisp")
#+END_SRC

** [[bind.lisp][bind.lisp]]

Handling bindings

*** Set Key Prefix

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Bindings
;;;

;; Set prefix key
(set-prefix-key (kbd "C-t"))
#+END_SRC

*** Define Key Macros

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Bind Key Macro
;;;

;; Bind to *root-map*
(defmacro bind-shell-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string
                                            "run-shell-command "
                                            ,command)))

;; Bind to *root-map*
(defmacro bind-app-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string
                                            "run-shell-command "
                                            ,command)))

;; Bind to *top-map*
(defmacro bind-shell-to-topkey (key command &optional (map *top-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string
                                            "run-shell-command "
                                            ,command)))

;; Bind roft command to *root-map*
(defmacro bind-rofi-to-key (key command &optional (map *root-map*))
  `(define-key ,map (kbd ,key) (concatenate 'string
                                            "run-shell-command "
                                            '"rofi -i -show-icons -show "
                                            ,command)))
#+END_SRC

*** Define Bind Keylists

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Bind Key Lists
;;;

;; Set Rofi Keys
(defvar *my-rofi-key-commands*
  '(("SPC" "drun")
    ("RET" "window")))

;; Set Special keys
(defvar *my-special-key-commands*
  '(("Print" "scrot -F ~/Pictures/screenshot-`date +%F`.png && notify-send -i camera -u low -a Scrot scrot")
    ("M-Print" "scrot -s -F ~/Pictures/screenshot-split-`date +%F`.png && notify-send -i camera -u normal -a Split scrot")
    ("s-Print" "scrot -u -F ~/Pictures/screenshot-activewin-`date +%F`.png && notify-send -i camera -u critical -a Window scrot")
    ("XF86AudioRaiseVolume" "volume-up")
    ("XF86AudioLowerVolume" "volume-down")
    ("XF86AudioMute" "toggle-mute")))

;; Set Shell Keys
(defvar *my-shell-key-commands*
  '(("c" "st")
    ("C-c" "st")
    ("M-m" "st -e mocp")
    ("i" "st -e htop")
    ("x" "xkill")
    ("l" "slock")
    ("M-b" "feh --bg-fill $(shuf -n1 -e /usr/local/share/backgrounds/*)")))

;; Set App Keys
(defvar *my-app-key-commands*
  '(("f" "ungoogled-chromium")
    ("E" "thunderbird")
    ("F" "rox-filer")))
#+END_SRC

*** Loop Bind Keylists

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Loop & Bind with Macros from earlier
;;;

;; Loop through keybind lists
(loop for (key cmd) in *my-rofi-key-commands* do
  (bind-rofi-to-key key cmd))

(loop for (key cmd) in *my-shell-key-commands* do
  (bind-shell-to-key key cmd))

(loop for (key cmd) in *my-app-key-commands* do
  (bind-app-to-key key cmd))

(loop for (key cmd) in *my-special-key-commands* do
  (bind-shell-to-topkey key cmd))
#+END_SRC

*** Set Misc. Binds

#+BEGIN_SRC lisp :tangle bind.lisp
;;;
;; Misc Bindings
;;;

;; Kill/Enable AutoSleep
(defcommand kill-sleep() ()
  (message "Killing Autosleep")
  (run-commands
   "run-shell-command xset s off"
   "run-shell-command xset s noblank"
   "run-shell-command xset -dpms"
   "run-shell-command pkill xidle"))
(defcommand enable-sleep() ()
  (message "Enable Autosleep")
  (run-commands
   "run-shell-command xset s on"
   "run-shell-command xset s blank"
   "run-shell-command xidle -delay 5 -nw -program /usr/local/bin/slock -timeout 1800 &"))
(define-key *root-map* (kbd "Menu") "kill-sleep")
(define-key *root-map* (kbd "C-Menu") "enable-sleep")

;; Global keybindings
(define-key *top-map* (kbd "M-ESC") "mode-line")
(define-key *root-map* (kbd "M-q") "quit")

;; Window movement/swapping
(define-key *root-map* (kbd "m") "mark")
(define-key *root-map* (kbd "M") "gmove-marked")
(define-key *root-map* (kbd "C-Up") "exchange-direction up")
(define-key *root-map* (kbd "C-Down") "exchange-direction down")
(define-key *root-map* (kbd "C-Left") "exchange-direction left")
(define-key *root-map* (kbd "C-Right") "exchange-direction right")

;; EMACS!!
(define-key *top-map* (kbd "s-e") "emacs-daemon-kill-force")
(define-key *top-map* (kbd "s-E") "run-shell-command emacs --daemon")
(define-key *root-map* (kbd "e") "emacs")
(define-key *root-map* (kbd "C-e") "emacs")
#+END_SRC

-----

** [[jumps.lisp][jumps.lisp]]

These are my Web/Term jump macros for /easy-peasy/ manpage searching or websurfing

*** Define Jumo Macros

#+BEGIN_SRC lisp :tangle jumps.lisp
;;;
;; Jump Macros
;;;

;; Web Jump commands
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search)
     ((:rest ,(concatenate 'string name " search: ")))
     (nsubstitute #\+ #\Space search)
     (run-shell-command (concatenate 'string ,prefix search))))

;; Term Jump commands
(defmacro make-term-jump (name prefix)
  `(defcommand ,(intern name) (search)
     ((:rest ,(concatenate 'string name " termsearch: ")))
     (nsubstitute #\+ #\Space search)
     (run-shell-command (concatenate 'string ,prefix search))))
#+END_SRC

*** Set Jump Aliases

#+BEGIN_SRC lisp :tangle jumps.lisp
;;;
;; Define Jumps
;;;

;; Define Web Jumps
(make-web-jump "ddg" "ungoogled-chromium https://html.duckduckgo.com/html?q=")
(make-web-jump "lite" "st -e links https://lite.duckduckgo.com/lite?q=")

;; Define Terminal Jumps
(make-term-jump "mansearch" "xterm -hold -e apropos ")
(make-term-jump "manpage" "xterm -hold -e man ")
(make-term-jump "pkgname" "xterm -hold -e pkg_info -Q ")
(make-term-jump "pkgloc" "xterm -hold -e pkg_locate ")
#+END_SRC

*** Bind Jump Aliases

#+BEGIN_SRC lisp :tangle jumps.lisp
;;;
;; Bind Jump Defines from Earlier
;;;

;; Keybindings for Web Jumps
(define-key *top-map* (kbd "M-s") "ddg")
(define-key *top-map* (kbd "M-d") "lite")

;; Keybindings for Terminal Jumps
(define-key *top-map* (kbd "M-m") "mansearch")
(define-key *top-map* (kbd "M-M") "manpage")
(define-key *top-map* (kbd "M-p") "pkgname")
(define-key *top-map* (kbd "M-P") "pkgloc")
#+END_SRC

-----
